Why "Java" is different than C & C++?
https://www.atnyla.com/tutorial/how-java-differs-from-c-and-c-/0/7

What are the IDEs available for Java, which is the most used one and why?
https://blog.idrsolutions.com/2015/03/the-top-11-free-ide-for-java-coding-development-programming/

why Java uses both Compiler and Interpreter?
https://www.quora.com/Why-does-Java-use-both-compiler-as-well-as-Interpreter

How to install JAVA and compile a sample java program.?
https://www.guru99.com/install-java.html

How to install an IDE and start writing and executing a Java Program in IDE?
https://www.tutorialspoint.com/eclipse/eclipse_installation.htm
===================================================
JVM: Java Virtual Machine - Interpreter to execute java programs (byte code) line by line.
executes precompiled java programs (.class, .jar files/bytecodes)

JRE: Java Runtime Environment - Environment to run Java Applications.
JVM + Libraries to run Java Program

JDK: Java Development Kit - Environment to develop, compile, run Java Applications.
JRE + Tools to develop Java Programs
============================================================================

Java Keywords:
https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html

Java Data Types:
https://www.w3schools.com/java/java_data_types.asp

Strings:
Strings in Java are objects.
Strings are immutable
Strings is only class which supports operator overloading.
We can concatenate two strings by using + operator.

String Methods:
https://www.w3schools.com/java/java_ref_string.asp

============================================================================
Observe Java Keywords Used in programs:
package, public, class, static, void, byte, short, int, long, float, double, boolean, char.
new, 
================================================================================


============================================================================
Running the Java Program from command line:

Package Name: com.learning.app
Java Class Name: App.java
E:\Learning\First-Steps-In-Java\Test\src>cd com
E:\Learning\First-Steps-In-Java\Test\src\com>cd learning
E:\Learning\First-Steps-In-Java\Test\src\com\learning>cd app

Compiling Java Program:
E:\Learning\First-Steps-In-Java\Test\src\com\learning\app>javac App.java

Running Java Program
E:\Learning\First-Steps-In-Java\Test\src\com\learning\app>java App.java
Hello world Java Learning from Eclipse
This is my first Java Program...Happy Learning!


==============================================================================
JAR: Java ARchive
	- Compressed format of a compiled java project.
	- Contains .class files + meta data and some other resources.

Exporting JAR File:
	Go to Project -> Export -> Java -> Jar File -> 
	In Jar File Specification -> Select the Export Location: E:\Learning\MyJARFiles\App.Jar
	Then Click on Next -> Next
	In JAR Manifest Specification -> Select Main Class to Execute: com.learning.app.App
	
	Now, it created: App.jar in E:\Learning\MyJARFiles\MyJARFiles.jar folder path.
	Now, we can execute the Jar file without IDE.
	
	Go to Command Line and Execute below command to run the project anywhere.
	E:\Learning\MyJARFiles\MyJARFiles.jar>java -jar App.Jar
	Hello world Java Learning from Eclipse
	This is my first Java Program...Happy Learning!
	
Extracting JAR File:
	Extracting the JAR File.
	In the extract folder, we see App.Class File and Manifest.MF File (Contains Main Class to Run)
	
Java Decompiling from Class to Java File:
	Open JD-GUI.exe file -> App.jar [Note: It did not work for App.Jar. Due to a Bug in JD-GUI]
	It displays Java File without any comments.
	
=============================================================================
Relational Operators:
================================
>  --  Greater than 
<  --  Less than
>= -- Greater than Equal to
<= -- Less than Equal to
== -- Equal to
!= -- Not Equal to

Examples:
2>3 - false
2<3 - true
4>=4 - true
4<=3 - false
3==2 - false
3!=2 - true

Equal Operator:
====================
== - Equal to 
=  - Assigning the value.


Comparing the Strings:
=============================
== , !=  --> Compares the memory location of the strings, Not the value of String.

if(string1.equals(string2)) == Comparing the strings value (Equals Method)
if(!string1.equals(string2)) == Comparing the strings value (Not Equals, adding not at the beginning)
if(string1.equalsignorecase(string2)) == comparing the strings value ignoring the case of the string value.


Logical Operators:
=======================
&& - AND - Both conditions must be true.
|| - OR - Atleast one condition must be true.
! - NOT - Condition must be false, so the resulting will be true.


Examples:
==========
1<=2 && 4!=5 --> T && T --> True
3==4 || "Mary".equals("Mary") --> F || T --> True.
!(2==3) --> !(F) --> True.


Short Circuit Logic:
====================
The AND and OR operators are used to combine two conditions into one.

For the AND operators, both conditions must be true. So, if the very first condition of an AND statement is false, it does not look at the second condition. There's no need to because both would need to be true in order for it to be true. It will look at the first one, if it's false the entire thing will be false. So, this saves a little bit of computational time.

Likewise, with the OR operator, if the first condition is true then it doesn't bother to look at the second condition.

=========================
While Loop:
Condition-Controlled: Loop Continues running while the specified condition remains true.
Pre-test: Condition is tested before entering the loop.
Execution: Best to use when the loop may/may not need to execute based on situation.
Dont forget to add sentinal (hoursWorked = scanner.nextDouble()) inside the while loop. Else, it would execute forever.

Do While Loop:
Condition-Controlled: Loop Continues running while the specified condition remains true.
Pre-test: Condition is tested after completing of the loop.
Execution: Best to use when the loop may/may not need to execute based on situation.
Dont forget to add sentinal (hoursWorked = scanner.nextDouble()) inside the while loop. Else, it would execute forever.


If Loop:
Break statement can be used to come out of If loop.

=======================================================================================================================
Methods:

Methods are used to break a complex problem into small, manageable pieces.
In Java, methods are subtasks within a class.
Methods should perform a specific task and can help eliminate redundancy in code.

Parts of a Method

Example: public static int calculateSum(int num1, int num2){
}

The very first line of the method is called the header.

The first word in a method header is the access modifier.
Access modifiers indicate who is allowed access to use this method. public means any code from any class can use this method. Other access modifiers include private and protected.
Having an access modifier is not required. If one is not specified, then it means that this method is only accessible by classes within the same package.

The next part of the header is a non-access modifier.
This includes static, final, abstract, and synchronized. 
not every method requires one of these modifiers.

Next is the return type.
This indicates the data type of the value that this method will return back to the code that calls it.
This particular method's job is to calculate two numbers. It has to specify that the sum will be returned, and it will be of data type int. That way, any method that happens to use this method, knows exactly what to expect.
Every method is required to specify a return type. If you look back to the programs that we've worked on in this course, we have the main method, which specifies its return type of void. Meaning, it is not going to return any value. So, even if your method returns nothing, you still have to specify a return type.
It's also important to note that a method can only return one value.

Next in the method header is the name.
Every method is required to have a name, and you should name your methods to reflect the task that they are designed to do. By convention, they should begin with a verb, like we see here, “calculate”, and optionally, adjectives or nouns can follow, such as “Sum”.
One deviation from this convention is for methods that return a boolean data type. By convention, their method names typically ask a question, such as: isSumNegative.
Remember that by convention, all method names should begin with a lower case.

After the method names comes a set of parentheses.
This is required. Although the parentheses can be empty, if no external data is needed for the task that the method needs to complete.
Alternatively, the parentheses are used to hold a list of all the data that should be supplied to this method, if it were to be called. This is known as the parameter list, and it's formatted as a comma-delimited list of input into the method.
In this example, we need two numbers in order to be able to calculate a sum, so we specify that in the header. So, if any program were to call us to calculate the sum of two numbers, they'd have to give us the two numbers as parameters.

Every method has a signature.
The signature consists of the name of the method and the method’s parameter list.
A method signature must be unique within a class.
Example: calculateSum(int num1, int num2)

After the method's header, comes the method's body, which is contained within a set of curly braces: {}

Example: public static int calculateSum(int num1, int num2)
{
   //
}

The body consists of 0 or more statements that are to be executed should this method be called.
If the body has specified a return type as anything other than void, the method must include a return statement, that returns a value that matches the return type specified in the header.





















