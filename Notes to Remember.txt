JVM: Java Virtual Machine - Interpreter to execute java programs (byte code) line by line.
executes precompiled java programs (.class, .jar files/bytecodes)

JRE: Java Runtime Environment - Environment to run Java Applications.
JVM + Libraroes to run Java Program

JDK: Java Development Kit - Environment to develop, compile, run Java Applications.
JRE + Tools to develop Java Programs
============================================================================
Running the Java Program from command line:

Package Name: com.learning.app
Java Class Name: App.java
E:\Learning\First-Steps-In-Java\Test\src>cd com
E:\Learning\First-Steps-In-Java\Test\src\com>cd learning
E:\Learning\First-Steps-In-Java\Test\src\com\learning>cd app

Compiling Java Program:
E:\Learning\First-Steps-In-Java\Test\src\com\learning\app>javac App.java

Running Java Program
E:\Learning\First-Steps-In-Java\Test\src\com\learning\app>java App.java
Hello world Java Learning from Eclipse
This is my first Java Program...Happy Learning!


==============================================================================
JAR: Java ARchive
	- Compressed format of a compiled java project.
	- Contains .class files + meta data and some other resources.

Exporting JAR File:
	Go to Project -> Export -> Java -> Jar File -> 
	In Jar File Specification -> Select the Export Location: E:\Learning\MyJARFiles\App.Jar
	Then Click on Next -> Next
	In JAR Manifest Specification -> Select Main Class to Execute: com.learning.app.App
	
	Now, it created: App.jar in E:\Learning\MyJARFiles\MyJARFiles.jar folder path.
	Now, we can execute the Jar file without IDE.
	
	Go to Command Line and Execute below command to run the project anywhere.
	E:\Learning\MyJARFiles\MyJARFiles.jar>java -jar App.Jar
	Hello world Java Learning from Eclipse
	This is my first Java Program...Happy Learning!
	
Extracting JAR File:
	Extracting the JAR File.
	In the extract folder, we see App.Class File and Manifest.MF File (Contains Main Class to Run)
	
Java Decompiling from Class to Java File:
	Open JD-GUI.exe file -> App.jar [Note: It did not work for App.Jar. Due to a Bug in JD-GUI]
	It displays Java File without any comments.
	
=============================================================================
Relational Operators:
================================
>  --  Greater than 
<  --  Less than
>= -- Greater than Equal to
<= -- Less than Equal to
== -- Equal to
!= -- Not Equal to

Examples:
2>3 - false
2<3 - true
4>=4 - true
4<=3 - false
3==2 - false
3!=2 - true

Equal Operator:
====================
== - Equal to 
=  - Assigning the value.


Comparing the Strings:
=============================
== , !=  --> Compares the memory location of the strings, Not the value of String.

if(string1.equals(string2)) == Comparing the strings value (Equals Method)
if(!string1.equals(string2)) == Comparing the strings value (Not Equals, adding not at the beginning)
if(string1.equalsignorecase(string2)) == comparing the strings value ignoring the case of the string value.


Logical Operators:
=======================
&& - AND - Both conditions must be true.
|| - OR - Atleast one condition must be true.
! - NOT - Condition must be false, so the resulting will be true.


Examples:
==========
1<=2 && 4!=5 --> T && T --> True
3==4 || "Mary".equals("Mary") --> F || T --> True.
!(2==3) --> !(F) --> True.


Short Circuit Logic:
====================
The AND and OR operators are used to combine two conditions into one.

For the AND operators, both conditions must be true. So, if the very first condition of an AND statement is false, it does not look at the second condition. There's no need to because both would need to be true in order for it to be true. It will look at the first one, if it's false the entire thing will be false. So, this saves a little bit of computational time.

Likewise, with the OR operator, if the first condition is true then it doesn't bother to look at the second condition.

=========================
While Loop:
Condition-Controlled: Loop Continues running while the specified condition remains true.
Pre-test: Condition is tested before entering the loop.
Execution: Best to use when the loop may/may not need to execute based on situation.
Dont forget to add sentinal (hoursWorked = scanner.nextDouble()) inside the while loop. Else, it would execute forever.

Do While Loop:
Condition-Controlled: Loop Continues running while the specified condition remains true.
Pre-test: Condition is tested after completing of the loop.
Execution: Best to use when the loop may/may not need to execute based on situation.
Dont forget to add sentinal (hoursWorked = scanner.nextDouble()) inside the while loop. Else, it would execute forever.


If Loop:
Break statement can be used to come out of If loop.
